{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Game.jsx","components/SideBar.jsx","components/TitleBar.jsx","app.js","index.js"],"names":["classNames","require","Square","props","className","square","valid","id","currBoard","winners","onClick","value","Board","i","this","currentBoard","renderSquare","React","Component","Game","boards","p","renderBoard","SideBar","onReset","type","name","checked","selectedState","onChange","TitleBar","status","winner","xIsNext","renderStatus","App","handleClick","board","state","makeMove","handleChange","event","setState","target","handleReset","console","log","initializeState","Array","fill","validMoves","getValidMoves","move","Math","floor","random","length","slice","calculateWinner","isBoardFull","index","boardNum","squareNum","push","updateWinner","randomPlay","Fragment","squares","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.184bba8a.chunk.js","sourcesContent":["import React from \"react\";\r\nvar classNames = require(\"classnames\");\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      className={classNames({\r\n        square: true,\r\n        valid: props.id === props.currBoard || props.currBoard === -1,\r\n        \"winner-x\": props.winners[props.id] === \"X\",\r\n        \"winner-o\": props.winners[props.id] === \"O\"\r\n      })}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        id={this.props.id}\r\n        currBoard={this.props.currentBoard}\r\n        value={this.props.value[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        winners={this.props.winners}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Game extends React.Component {\r\n  renderBoard(i) {\r\n    return (\r\n      <Board\r\n        value={this.props.boards[i]}\r\n        onClick={p => this.props.onClick(i, p)}\r\n        currentBoard={this.props.currentBoard}\r\n        id={i}\r\n        winners={this.props.winners}\r\n        className={classNames({\r\n          \"winner-x\": true\r\n        })}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"super-board\">\r\n        <div className=\"super-board-row\">\r\n          {this.renderBoard(0)}\r\n          {this.renderBoard(3)}\r\n          {this.renderBoard(6)}\r\n        </div>\r\n        <div className=\"super-board-row\">\r\n          {this.renderBoard(1)}\r\n          {this.renderBoard(4)}\r\n          {this.renderBoard(7)}\r\n        </div>\r\n        <div className=\"super-board-row\">\r\n          {this.renderBoard(2)}\r\n          {this.renderBoard(5)}\r\n          {this.renderBoard(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\n\r\nclass SideBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"float-left ml-4\">\r\n        <button\r\n          className={\"btn btn-danger font-weight-bold text-dark m-2\"}\r\n          onClick={this.props.onReset}\r\n        >\r\n          RESET\r\n        </button>\r\n\r\n        <div className=\"sidebar-sticky\">\r\n          <div>This is the sidebar</div>\r\n          <div className=\"radio\">\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"values\"\r\n                value=\"randomAI\"\r\n                checked={this.props.selectedState === \"randomAI\"}\r\n                onChange={value => this.props.onChange(value)}\r\n              />\r\n              {\" RandomAI\"}\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label className=\"radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"values\"\r\n                value=\"players\"\r\n                checked={this.props.selectedState === \"players\"}\r\n                onChange={value => this.props.onChange(value)}\r\n              />\r\n              {\" Player v Player\"}\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label className=\"radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"values\"\r\n                value=\"paused\"\r\n                checked={this.props.selectedState === \"paused\"}\r\n                onChange={value => this.props.onChange(value)}\r\n              />{\" \"}\r\n              {\" Paused\"}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\n\r\nclass TitleBar extends React.Component {\r\n  renderStatus() {\r\n    const winner = this.props.winner;\r\n    let status;\r\n    if (winner) {\r\n      status = \"The winner is \" + winner + \"!\";\r\n    } else {\r\n      status = \"Current Player: \" + (this.props.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return <h1 className=\"status text-center\">{status}</h1>;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderStatus()}</div>;\r\n  }\r\n}\r\n\r\nexport default TitleBar;\r\n","import React from \"react\";\r\nimport Game from \"./components/Game\";\r\nimport SideBar from \"./components/SideBar\";\r\nimport TitleBar from \"./components/TitleBar\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    let boards = Array(9).fill(null);\r\n    for (let i = 0; i < 9; i++) {\r\n      boards[i] = Array(9).fill(null);\r\n    }\r\n    this.state = {\r\n      boards: boards,\r\n      winners: Array(9).fill(null),\r\n      xIsNext: true,\r\n      currentBoard: -1,\r\n      winner: null,\r\n      selectedState: \"randomAI\" // Options -- randomAI players paused\r\n    };\r\n  }\r\n\r\n  initializeState() {\r\n    let boards = Array(9).fill(null);\r\n    for (let i = 0; i < 9; i++) {\r\n      boards[i] = Array(9).fill(null);\r\n    }\r\n    this.setState({\r\n      boards: boards,\r\n      winners: Array(9).fill(null),\r\n      xIsNext: true,\r\n      currentBoard: -1,\r\n      winner: null,\r\n      selectedState: \"randomAI\" // Options -- randomAI players paused\r\n    });\r\n  }\r\n\r\n  randomPlay() {\r\n    if (this.state.winner || this.state.selectedState === \"players\") {\r\n      return; // Dont try to make a move if there is already a winner\r\n    }\r\n    const validMoves = this.getValidMoves();\r\n    const move = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n    if (this.state.selectedState === \"randomAI\" && !this.state.xIsNext) {\r\n      this.makeMove(move[0], move[1]);\r\n    }\r\n  }\r\n\r\n  handleClick = (board, square) => {\r\n    if (this.state.selectedState === \"randomAI\" && !this.state.xIsNext) {\r\n      return;\r\n    }\r\n    this.makeMove(board, square);\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ selectedState: event.target.value });\r\n  };\r\n\r\n  handleReset = () => {\r\n    console.log(\"Resetting\");\r\n    this.initializeState();\r\n  };\r\n\r\n  makeMove(board, square) {\r\n    const boards = this.state.boards.slice();\r\n    const winners = this.state.winners.slice();\r\n    let currBoard = this.state.currentBoard;\r\n    if (calculateWinner(winners) || this.state.selectedState === \"paused\") {\r\n      // If there is a winner, dont accept clicks\r\n      // If the game is paused by user, dont accept moves\r\n      return;\r\n    }\r\n\r\n    if (currBoard === board || currBoard === -1) {\r\n      // We are playing on valid board\r\n      if (boards[board][square]) {\r\n        return;\r\n      } else {\r\n        boards[board][square] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n          // Update the winners for each board\r\n          if (winners[i]) {\r\n            // If there is already a winner, do not change it\r\n            continue;\r\n          }\r\n          winners[i] = calculateWinner(boards[i]);\r\n        }\r\n\r\n        if (this.isBoardFull(square)) {\r\n          // If we filled up the baord, set current board to -1\r\n          square = -1; // currentBoard gets set to square below\r\n        }\r\n\r\n        this.setState({\r\n          boards: boards,\r\n          winners: winners,\r\n          xIsNext: !this.state.xIsNext,\r\n          currentBoard: square\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  isBoardFull(index) {\r\n    const board = this.state.boards[index];\r\n    for (let i = 0; i < 9; i++) {\r\n      if (!board[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getValidMoves() {\r\n    const boards = this.state.boards;\r\n    const currBoard = this.state.currentBoard;\r\n    let validMoves = [];\r\n    if (this.state.winner) {\r\n      return; // There are no valid moves if there is a winner\r\n    }\r\n\r\n    if (currBoard === -1) {\r\n      // We can choose any board to play on\r\n      for (let boardNum = 0; boardNum < 9; boardNum++) {\r\n        for (let squareNum = 0; squareNum < 9; squareNum++) {\r\n          if (!boards[boardNum][squareNum]) {\r\n            validMoves.push([boardNum, squareNum]);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let squareNum = 0; squareNum < 9; squareNum++) {\r\n        if (!boards[currBoard][squareNum]) {\r\n          validMoves.push([currBoard, squareNum]);\r\n        }\r\n      }\r\n    }\r\n    return validMoves;\r\n  }\r\n\r\n  updateWinner() {\r\n    const winner = calculateWinner(this.state.winners);\r\n    if (winner && this.state.currentBoard !== -2) {\r\n      // If we have a winner, and we havnet updated the currentBoard yet\r\n      this.setState({\r\n        winner: winner\r\n      });\r\n      this.setState({\r\n        currentBoard: -2\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updateWinner();\r\n    this.randomPlay();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <TitleBar winner={this.state.winner} xIsNext={this.state.xIsNext} />\r\n        <SideBar\r\n          selectedState={this.state.selectedState}\r\n          onChange={this.handleChange}\r\n          onReset={this.handleReset}\r\n        />\r\n        <div className=\"game\">\r\n          <Game\r\n            onClick={this.handleClick}\r\n            boards={this.state.boards}\r\n            winners={this.state.winners}\r\n            xIsNext={this.state.xIsNext}\r\n            currentBoard={this.state.currentBoard}\r\n            winner={this.state.winner}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./app\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}