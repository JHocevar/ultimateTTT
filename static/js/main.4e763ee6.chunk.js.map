{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Game.jsx","components/SideBar.jsx","components/TitleBar.jsx","GameState.js","MonteCarloTreeSearch.js","app.js","index.js"],"names":["classNames","require","Square","props","className","square","valid","id","currBoard","winners","onClick","value","Board","i","this","currentBoard","renderSquare","React","Component","Game","boards","p","renderBoard","SideBar","selectedState","type","name","checked","simulationMode","onChange","onOptionChange","message","paused","onPause","ties","numSims","numWinsX","numWinsO","onStatReset","onReset","renderGameOptions","renderSimOptions","renderPauseButton","renderStats","TitleBar","status","winner","xIsNext","renderStatus","GameState","state","JSON","parse","stringify","move","board","slice","calculateWinner","isBoardFull","index","validMoves","boardNum","squareNum","push","isAllFull","player","MonteCarloTreeSearch","nodes","currNode","undefined","newNode","MCNode","initialize","endTime","Date","getTime","select","expand","simulate","backPropogate","console","log","bestMove","bestRate","Infinity","key","children","child","rate","numWins","getValidMoves","Math","floor","random","length","isLeafNode","isFullyExpanded","bestChild","bestUCB1","getUCB1","loop","newState","makeMove","updateWinner","isPlayer","parent","Object","keys","sqrt","App","handleClick","handleChange","event","setState","target","handleOptionChange","parseInt","handleReset","initializeState","handleStatReset","handlePause","MCSearch","Array","fill","mode","clonedGame","runSearch","getBestMove","setInterval","smartPlay","randomPlay","squares","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e763ee6.chunk.js","sourcesContent":["import React from \"react\";\r\nvar classNames = require(\"classnames\");\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      className={classNames({\r\n        square: true,\r\n        valid: props.id === props.currBoard || props.currBoard === -1,\r\n        \"winner-x\": props.winners[props.id] === \"X\",\r\n        \"winner-o\": props.winners[props.id] === \"O\"\r\n      })}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        id={this.props.id}\r\n        currBoard={this.props.currentBoard}\r\n        value={this.props.value[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        winners={this.props.winners}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Game extends React.Component {\r\n  renderBoard(i) {\r\n    return (\r\n      <Board\r\n        value={this.props.boards[i]}\r\n        onClick={p => this.props.onClick(i, p)}\r\n        currentBoard={this.props.currentBoard}\r\n        id={i}\r\n        winners={this.props.winners}\r\n        className={classNames({\r\n          \"winner-x\": true\r\n        })}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"super-board\">\r\n        <div className=\"super-board-row\">\r\n          {this.renderBoard(0)}\r\n          {this.renderBoard(3)}\r\n          {this.renderBoard(6)}\r\n        </div>\r\n        <div className=\"super-board-row\">\r\n          {this.renderBoard(1)}\r\n          {this.renderBoard(4)}\r\n          {this.renderBoard(7)}\r\n        </div>\r\n        <div className=\"super-board-row\">\r\n          {this.renderBoard(2)}\r\n          {this.renderBoard(5)}\r\n          {this.renderBoard(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\n\r\n/*\r\nRenders the sidebar with the game options, simulation options and the simulation stats\r\n*/\r\nclass SideBar extends React.Component {\r\n  renderSimOptions() {\r\n    if (this.props.selectedState === \"simulate\") {\r\n      return (\r\n        <div className=\"text-left\">\r\n          <h3>Sim Options</h3>\r\n          <div className=\"radio\">\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"options\"\r\n                value=\"1\"\r\n                checked={this.props.simulationMode === 1}\r\n                onChange={value => this.props.onOptionChange(value)}\r\n              />\r\n              {\" Random v Random\"}\r\n            </label>\r\n          </div>\r\n          <div className=\"radio\">\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"options\"\r\n                value=\"2\"\r\n                checked={this.props.simulationMode === 2}\r\n                onChange={value => this.props.onOptionChange(value)}\r\n              />\r\n              {\" Smart v Random\"}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderPauseButton() {\r\n    let message;\r\n    if (this.props.paused) {\r\n      message = \"Unpause\";\r\n    } else {\r\n      message = \"Pause\";\r\n    }\r\n    return (\r\n      <div className=\"text-center\">\r\n        <button\r\n          className={\"btn btn-danger font-weight-bold text-dark m-2\"}\r\n          onClick={this.props.onPause}\r\n        >\r\n          {message}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderStats() {\r\n    let ties = this.props.numSims - this.props.numWinsX - this.props.numWinsO;\r\n    if (this.props.numSims > 0 || this.props.selectedState === \"simulate\")\r\n      return (\r\n        <div className=\"text-center\">\r\n          <p className=\"text-left\">\r\n            {\"Number of Simulations: \" + this.props.numSims}\r\n          </p>\r\n          <p className=\"text-left\">\r\n            {\"Number of X Wins: \" + this.props.numWinsX}\r\n          </p>\r\n          <p className=\"text-left\">\r\n            {\" X Winrate: \" +\r\n              (this.props.numWinsX / this.props.numSims) * 100 +\r\n              \"%\"}\r\n          </p>\r\n          <p className=\"text-left\">\r\n            {\" Number of O wins: \" + this.props.numWinsO}\r\n          </p>\r\n          <p className=\"text-left\">\r\n            {\" O Winrate: \" +\r\n              (this.props.numWinsO / this.props.numSims) * 100 +\r\n              \"%\"}\r\n          </p>\r\n          <p className=\"text-left\">{\" Number of Ties: \" + ties}</p>\r\n          <p className=\"text-left\">\r\n            {\" Tie Rate: \" + (ties / this.props.numSims) * 100 + \"%\"}\r\n          </p>\r\n          <button\r\n            className=\"btn btn-danger font-weight-bold text-dark m-2\"\r\n            onClick={this.props.onStatReset}\r\n          >\r\n            Reset Statistics\r\n          </button>\r\n        </div>\r\n      );\r\n  }\r\n\r\n  renderGameOptions() {\r\n    return (\r\n      <div className=\"sidebar-sticky text-left\">\r\n        <h2>Game Options</h2>\r\n        <div className=\"radio\">\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"values\"\r\n              value=\"randomAI\"\r\n              checked={this.props.selectedState === \"randomAI\"}\r\n              onChange={value => this.props.onChange(value)}\r\n            />\r\n            {\" Random A.I.\"}\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label className=\"radio\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"values\"\r\n              value=\"smartAI\"\r\n              checked={this.props.selectedState === \"smartAI\"}\r\n              onChange={value => this.props.onChange(value)}\r\n            />\r\n            {\" Smart A.I.\"}\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label className=\"radio\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"values\"\r\n              value=\"players\"\r\n              checked={this.props.selectedState === \"players\"}\r\n              onChange={value => this.props.onChange(value)}\r\n            />\r\n            {\" Player v Player\"}\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label className=\"radio\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"values\"\r\n              value=\"simulate\"\r\n              checked={this.props.selectedState === \"simulate\"}\r\n              onChange={value => this.props.onChange(value)}\r\n            />{\" \"}\r\n            {\" Simulate\"}\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"float-left text-center ml-5\">\r\n        <div>\r\n          <button\r\n            className={\"btn btn-danger font-weight-bold text-dark m-2\"}\r\n            onClick={this.props.onReset}\r\n          >\r\n            RESET\r\n          </button>\r\n          {this.renderGameOptions()}\r\n          {this.renderSimOptions()}\r\n          {this.renderPauseButton()}\r\n          {this.renderStats()}\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\n\r\nclass TitleBar extends React.Component {\r\n  renderStatus() {\r\n    const winner = this.props.winner;\r\n    let status;\r\n    if (winner) {\r\n      status = \"The winner is \" + winner + \"!\";\r\n    } else if (this.props.currentBoard === -2) {\r\n      status = \"The game was a tie\";\r\n    } else {\r\n      status = \"Current Player: \" + (this.props.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return <h1 className=\"status text-center\">{status}</h1>;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderStatus()}</div>;\r\n  }\r\n}\r\n\r\nexport default TitleBar;\r\n","import { calculateWinner } from \"./app\";\r\n\r\n// Similar to app, runs the game but with less features, for storing the state in\r\n// MonteCarloTreeSearch class\r\nclass GameState {\r\n  constructor(state) {\r\n    this.state = JSON.parse(JSON.stringify(state));\r\n  }\r\n\r\n  makeMove(move) {\r\n    let board = move[0];\r\n    let square = move[1];\r\n    const boards = this.state.boards.slice();\r\n    const winners = this.state.winners.slice();\r\n    let currBoard = this.state.currentBoard;\r\n    if (calculateWinner(winners)) {\r\n      // If there is a winner, dont accept clicks\r\n      // If the game is paused by user, dont accept moves\r\n\r\n      return;\r\n    }\r\n\r\n    if (currBoard === board || currBoard === -1) {\r\n      // We are playing on valid board\r\n      if (boards[board][square]) {\r\n        return;\r\n      } else {\r\n        boards[board][square] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n          // Update the winners for each board\r\n          if (winners[i]) {\r\n            // If there is already a winner, do not change it\r\n            continue;\r\n          }\r\n          winners[i] = calculateWinner(boards[i]);\r\n        }\r\n\r\n        if (this.isBoardFull(square)) {\r\n          // If we filled up the baord, set current board to -1\r\n          square = -1; // currentBoard gets set to square below\r\n        }\r\n\r\n        this.state.boards = boards;\r\n        this.state.winners = winners;\r\n        this.state.xIsNext = !this.state.xIsNext;\r\n        this.state.currentBoard = square;\r\n      }\r\n    }\r\n  }\r\n\r\n  isBoardFull(index) {\r\n    const board = this.state.boards[index];\r\n    for (let i = 0; i < 9; i++) {\r\n      if (!board[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isAllFull() {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (!this.isBoardFull(i)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getValidMoves() {\r\n    const boards = this.state.boards;\r\n    const currBoard = this.state.currentBoard;\r\n    let validMoves = [];\r\n    if (this.state.winner) {\r\n      return []; // There are no valid moves if there is a winner\r\n    }\r\n\r\n    if (currBoard === -1) {\r\n      // We can choose any board to play on\r\n      for (let boardNum = 0; boardNum < 9; boardNum++) {\r\n        for (let squareNum = 0; squareNum < 9; squareNum++) {\r\n          if (!boards[boardNum][squareNum]) {\r\n            validMoves.push([boardNum, squareNum]);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      if (currBoard === -2) return []; // There are no valid moves if the board is -2\r\n      for (let squareNum = 0; squareNum < 9; squareNum++) {\r\n        if (!boards[currBoard][squareNum]) {\r\n          validMoves.push([currBoard, squareNum]);\r\n        }\r\n      }\r\n    }\r\n    return validMoves;\r\n  }\r\n\r\n  updateWinner() {\r\n    const winner = calculateWinner(this.state.winners);\r\n    if (winner && this.state.currentBoard !== -2) {\r\n      // If we have a winner, and we havnet updated the currentBoard yet\r\n      this.state.winner = winner;\r\n      this.state.currentBoard = -2;\r\n    }\r\n\r\n    if (this.isAllFull() && this.state.currentBoard !== -2) {\r\n      this.state.currentBoard = -2;\r\n    }\r\n  }\r\n\r\n  isPlayer(player) {\r\n    if (player === \"X\" && this.state.xIsNext) {\r\n      return true;\r\n    }\r\n    if (player === \"O\" && !this.state.xIsNext) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default GameState;\r\n","import GameState from \"./GameState\";\r\n\r\nclass MonteCarloTreeSearch {\r\n  constructor() {\r\n    this.nodes = {};\r\n    this.currNode = null;\r\n  }\r\n\r\n  initialize(state) {\r\n    if (\r\n      this.nodes[JSON.stringify(state.state)] === null ||\r\n      this.nodes[JSON.stringify(state.state)] === undefined\r\n    ) {\r\n      let newNode = new MCNode(null, new GameState(state.state), 0);\r\n      this.currNode = newNode;\r\n      this.nodes[JSON.stringify(state.state)] = newNode;\r\n    } else {\r\n      this.currNode = this.nodes[JSON.stringify(state.state)];\r\n    }\r\n  }\r\n\r\n  runSearch(state) {\r\n    this.initialize(state);\r\n\r\n    let endTime = new Date().getTime() + 1000;\r\n\r\n    let numSims = 0;\r\n    while (new Date().getTime() < endTime) {\r\n      this.select(state);\r\n\r\n      this.expand();\r\n\r\n      let winner = this.simulate();\r\n\r\n      this.backPropogate(winner);\r\n      numSims++;\r\n    }\r\n    console.log(\"Number of sims ran: \", numSims);\r\n  }\r\n\r\n  getBestMove(state) {\r\n    let bestMove;\r\n    let bestRate = -Infinity;\r\n    this.currNode = this.nodes[JSON.stringify(state.state)];\r\n    for (let key in this.currNode.children) {\r\n      let child = this.currNode.children[key];\r\n      let rate = child.numWins / child.numSims;\r\n      if (rate > bestRate) {\r\n        bestRate = rate;\r\n        bestMove = child.move;\r\n      }\r\n    }\r\n    if (bestMove === undefined) {\r\n      let validMoves = state.getValidMoves();\r\n      bestMove = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n    }\r\n    return bestMove;\r\n  }\r\n\r\n  select(state) {\r\n    this.currNode = this.nodes[JSON.stringify(state.state)];\r\n    while (!this.currNode.isLeafNode() && this.currNode.isFullyExpanded()) {\r\n      let bestChild;\r\n      let bestUCB1 = -Infinity;\r\n      for (let key in this.currNode.children) {\r\n        let child = this.currNode.children[key];\r\n        if (child.getUCB1() > bestUCB1) {\r\n          bestUCB1 = child.getUCB1();\r\n          bestChild = child;\r\n        }\r\n      }\r\n      this.currNode = bestChild;\r\n    }\r\n  }\r\n\r\n  expand() {\r\n    let validMoves = this.currNode.state.getValidMoves();\r\n    if (validMoves.length === 0) return;\r\n\r\n    let loop = false;\r\n    let move;\r\n    do {\r\n      loop = false;\r\n      move = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n      for (let key in this.currNode.children) {\r\n        let child = this.currNode.children[key];\r\n        if (child.move === move) {\r\n          loop = true;\r\n        }\r\n      }\r\n    } while (loop);\r\n\r\n    let newState = new GameState(this.currNode.state.state);\r\n    newState.makeMove(move);\r\n    let newNode = new MCNode(this.currNode, newState, move);\r\n    this.currNode.children[JSON.stringify(newState.state)] = newNode;\r\n    this.nodes[JSON.stringify(newState.state)] = newNode;\r\n    this.currNode = newNode;\r\n  }\r\n\r\n  simulate() {\r\n    let state = new GameState(this.currNode.state.state);\r\n    let winner = state.state.winner;\r\n    while (state.currentBoard !== -2) {\r\n      let validMoves = state.getValidMoves();\r\n      if (validMoves.length === 0) break;\r\n      let move = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n      state.makeMove(move);\r\n      state.updateWinner();\r\n      winner = state.state.winner;\r\n    }\r\n    return winner;\r\n  }\r\n\r\n  backPropogate(winner) {\r\n    while (this.currNode !== null && this.currNode !== undefined) {\r\n      this.currNode.numSims++;\r\n      if (winner === \"\") {\r\n        this.currNode.numWins += 0.5;\r\n      } else if (!this.currNode.state.isPlayer(winner)) {\r\n        this.currNode.numWins++;\r\n      }\r\n      this.currNode = this.currNode.parent;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MonteCarloTreeSearch;\r\n\r\nclass MCNode {\r\n  constructor(parent, state, move) {\r\n    this.parent = parent;\r\n    this.state = state;\r\n    this.move = move;\r\n    this.children = {};\r\n    this.numWins = 0;\r\n    this.numSims = 0;\r\n  }\r\n\r\n  isLeafNode() {\r\n    if (Object.keys(this.children).length === 0) return true;\r\n    return false;\r\n  }\r\n\r\n  isFullyExpanded() {\r\n    if (Object.keys(this.children).length === this.state.getValidMoves().length)\r\n      return true;\r\n    return false;\r\n  }\r\n\r\n  getUCB1() {\r\n    return (\r\n      this.numWins / this.numSims +\r\n      Math.sqrt(2 * Math.log(this.parent.numSims / this.numSims))\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Game from \"./components/Game\";\r\nimport SideBar from \"./components/SideBar\";\r\nimport TitleBar from \"./components/TitleBar\";\r\nimport MonteCarloTreeSearch from \"./MonteCarloTreeSearch\";\r\nimport GameState from \"./GameState\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.MCSearch = new MonteCarloTreeSearch();\r\n    let boards = Array(9).fill(null);\r\n    for (let i = 0; i < 9; i++) {\r\n      boards[i] = Array(9).fill(null);\r\n    }\r\n    this.state = {\r\n      boards: boards,\r\n      winners: Array(9).fill(null),\r\n      xIsNext: true,\r\n      currentBoard: -1,\r\n      winner: null,\r\n      selectedState: \"randomAI\", // Options -- randomAI players smartAI simulate\r\n      simulationMode: 1, // 1 - Random v Random  2 - Smart v Random\r\n      paused: false,\r\n      numSims: 0,\r\n      numWinsX: 0,\r\n      numWinsO: 0\r\n    };\r\n  }\r\n\r\n  initializeState() {\r\n    let boards = Array(9).fill(null);\r\n    for (let i = 0; i < 9; i++) {\r\n      boards[i] = Array(9).fill(null);\r\n    }\r\n    this.setState({\r\n      boards: boards,\r\n      winners: Array(9).fill(null),\r\n      xIsNext: true,\r\n      currentBoard: -1,\r\n      winner: null,\r\n      // selectedState: \"randomAI\", // Options -- randomAI players smartAI simulate\r\n      // simulationMode: 1, // 1 - Random v Random  2 - Smart v Random\r\n      paused: false\r\n    });\r\n    this.MCSearch = new MonteCarloTreeSearch(); // Reset the game tree to clear up memory\r\n  }\r\n\r\n  randomPlay() {\r\n    const mode = this.state.selectedState;\r\n    if (this.state.winner || mode === \"players\" || mode === \"smartAI\") {\r\n      return; // Dont try to make a move if there is already a winner\r\n    }\r\n    const validMoves = this.getValidMoves();\r\n    if (validMoves.length === 0) return; // We cannot make a move if there are no valid moves\r\n    const move = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n    if (\r\n      (mode === \"randomAI\" && !this.state.xIsNext) ||\r\n      (mode === \"simulate\" &&\r\n        (this.state.simulationMode === 1 || !this.state.xIsNext))\r\n    ) {\r\n      this.makeMove(move[0], move[1]);\r\n    }\r\n  }\r\n\r\n  smartPlay() {\r\n    const mode = this.state.selectedState;\r\n    if (\r\n      this.state.winner ||\r\n      mode === \"players\" ||\r\n      mode === \"randomAI\" ||\r\n      this.state.paused\r\n    ) {\r\n      return; // Dont try to make a move if ther is already a winner\r\n    }\r\n    if (\r\n      (this.state.xIsNext &&\r\n        mode === \"simulate\" &&\r\n        this.state.simulationMode === 2) ||\r\n      (mode === \"smartAI\" && !this.state.xIsNext)\r\n    ) {\r\n      let clonedGame = new GameState(this.state);\r\n      this.MCSearch.runSearch(clonedGame); // Pass a clone of yourself\r\n      let move = this.MCSearch.getBestMove(clonedGame);\r\n      this.makeMove(move[0], move[1]);\r\n    }\r\n  }\r\n\r\n  handleClick = (board, square) => {\r\n    if (this.state.selectedState !== \"players\" && !this.state.xIsNext) {\r\n      return;\r\n    }\r\n    this.makeMove(board, square);\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ selectedState: event.target.value });\r\n  };\r\n\r\n  handleOptionChange = event => {\r\n    this.setState({ simulationMode: parseInt(event.target.value) });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.initializeState();\r\n  };\r\n\r\n  handleStatReset = () => {\r\n    console.log(\"resetting simulations\");\r\n    this.setState({\r\n      numSims: 0,\r\n      numWinsX: 0,\r\n      numWinsO: 0\r\n    });\r\n  };\r\n\r\n  handlePause = () => {\r\n    this.setState({ paused: !this.state.paused });\r\n  };\r\n\r\n  makeMove(board, square) {\r\n    const boards = this.state.boards.slice();\r\n    const winners = this.state.winners.slice();\r\n    let currBoard = this.state.currentBoard;\r\n    if (calculateWinner(winners) || this.currentBoard === -2) {\r\n      // If there is a winner, dont accept clicks\r\n      // If the game is paused by user, dont accept moves\r\n      return;\r\n    }\r\n\r\n    if (currBoard === board || currBoard === -1) {\r\n      // We are playing on valid board\r\n      if (boards[board][square]) {\r\n        return;\r\n      } else {\r\n        boards[board][square] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n          // Update the winners for each board\r\n          if (winners[i]) {\r\n            // If there is already a winner, do not change it\r\n            continue;\r\n          }\r\n          winners[i] = calculateWinner(boards[i]);\r\n        }\r\n\r\n        if (this.isBoardFull(square)) {\r\n          // If we filled up the baord, set current board to -1\r\n          square = -1; // currentBoard gets set to square below\r\n        }\r\n\r\n        this.setState({\r\n          boards: boards,\r\n          winners: winners,\r\n          xIsNext: !this.state.xIsNext,\r\n          currentBoard: square\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  isBoardFull(index) {\r\n    const board = this.state.boards[index];\r\n    for (let i = 0; i < 9; i++) {\r\n      if (!board[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isAllFull() {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (!this.isBoardFull(i)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getValidMoves() {\r\n    const boards = this.state.boards;\r\n    const currBoard = this.state.currentBoard;\r\n    let validMoves = [];\r\n    if (this.state.winner) {\r\n      return; // There are no valid moves if there is a winner\r\n    }\r\n\r\n    if (currBoard === -1) {\r\n      // We can choose any board to play on\r\n      for (let boardNum = 0; boardNum < 9; boardNum++) {\r\n        for (let squareNum = 0; squareNum < 9; squareNum++) {\r\n          if (!boards[boardNum][squareNum]) {\r\n            validMoves.push([boardNum, squareNum]);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      if (currBoard === -2) return []; // There are no valid moves if the board is -2\r\n      for (let squareNum = 0; squareNum < 9; squareNum++) {\r\n        if (!boards[currBoard][squareNum]) {\r\n          validMoves.push([currBoard, squareNum]);\r\n        }\r\n      }\r\n    }\r\n    return validMoves;\r\n  }\r\n\r\n  updateWinner() {\r\n    const winner = calculateWinner(this.state.winners);\r\n    if (winner && this.state.currentBoard !== -2) {\r\n      // If we have a winner, and we havnet updated the currentBoard yet\r\n      this.setState({\r\n        winner: winner,\r\n        currentBoard: -2\r\n      });\r\n    }\r\n\r\n    if (this.isAllFull() && this.state.currentBoard !== -2) {\r\n      this.setState({\r\n        currentBoard: -2\r\n      });\r\n    }\r\n\r\n    if (this.state.currentBoard !== -2) {\r\n      for (let i = 0; i < 9; i++) {\r\n        if (!this.state.winners[i] && !this.isBoardFull(i)) {\r\n          return;\r\n        }\r\n      }\r\n      this.setState({\r\n        currentBoard: -2\r\n      });\r\n    }\r\n\r\n    // Reset the board and clear the game tree when a simulation is finished\r\n    if (this.state.selectedState === \"simulate\") {\r\n      // We are running simulations, reset the board\r\n      if (winner === \"X\") {\r\n        this.setState({ numWinsX: this.state.numWinsX + 1 });\r\n      } else if (winner === \"O\") {\r\n        this.setState({ numWinsO: this.state.numWinsO + 1 });\r\n      }\r\n      this.setState({ numSims: this.state.numSims + 1 });\r\n\r\n      this.initializeState(); // Reset the board\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updateWinner();\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      if (this.state.paused) return;\r\n      this.smartPlay();\r\n      this.randomPlay();\r\n    }, 1);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <TitleBar\r\n          winner={this.state.winner}\r\n          xIsNext={this.state.xIsNext}\r\n          currentBoard={this.state.currentBoard}\r\n        />\r\n        <SideBar\r\n          selectedState={this.state.selectedState}\r\n          onChange={this.handleChange}\r\n          onOptionChange={this.handleOptionChange}\r\n          onReset={this.handleReset}\r\n          onPause={this.handlePause}\r\n          onStatReset={this.handleStatReset}\r\n          simulationMode={this.state.simulationMode}\r\n          paused={this.state.paused}\r\n          numSims={this.state.numSims}\r\n          numWinsX={this.state.numWinsX}\r\n          numWinsO={this.state.numWinsO}\r\n        />\r\n        <div className=\"game\">\r\n          <Game\r\n            onClick={this.handleClick}\r\n            boards={this.state.boards}\r\n            winners={this.state.winners}\r\n            xIsNext={this.state.xIsNext}\r\n            currentBoard={this.state.currentBoard}\r\n            winner={this.state.winner}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nexport function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./app\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}